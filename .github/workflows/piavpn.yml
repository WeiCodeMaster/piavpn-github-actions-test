name: Rumble Visit with VPN in Container

on:
  push:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      video_url:
        description: "Rumble Video URL"
        required: true
        default: "https://rumble.com/v6r0vz6-automate.html"

jobs:
  rumble-vpn:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/catthehacker/ubuntu:systemd
      # Docker options to enable systemd inside the container.
      options: --privileged --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Systemd and D-Bus Status
        run: |
          echo "=== Systemd Version ==="
          systemctl --version || true
          echo "=== Systemctl Status ==="
          systemctl status || true
          echo "=== D-Bus List Names ==="
          dbus-send --system --dest=org.freedesktop.DBus --print-reply / org.freedesktop.DBus.ListNames || true

      - name: Install Essential Dependencies
        run: |
          apt update
          apt install -y curl wget sudo iproute2 apt-transport-https gnupg ca-certificates
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          apt install -y nodejs
          apt install -y fonts-liberation libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcups2 \
            libdbus-1-3 libgbm1 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 \
            libxcomposite1 libxdamage1 libxext6 libxfixes3 libxrandr2 libxshmfence1 libxss1 \
            libasound2t64 libpulse0 libxkbcommon0 xdg-utils lsb-release libasound2-plugins

      - name: Install and Connect PIA
        env:
          PIA_USERNAME: ${{ secrets.PIA_USERNAME }}
          PIA_PASSWORD: ${{ secrets.PIA_PASSWORD }}
        run: |
          echo "Downloading PIA client..."
          curl -L -o pia.run https://installers.privateinternetaccess.com/download/pia-linux-3.3.1-06924.run
          chmod +x pia.run

          echo "Starting system dbus daemon..."
          sudo dbus-daemon --system --fork || true

          if ! id piauser >/dev/null 2>&1; then
            sudo adduser --disabled-password --gecos "" piauser
          fi
          echo "piauser ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/piauser

          echo "Running PIA installer as piauser..."
          su - piauser -c "$(pwd)/pia.run --accept --nox11" || true

          echo "Listing extracted files for debugging:"
          ls -R /home/piauser

          PIACTL_PATH=$(find /home/piauser /opt/piavpn -iname "piactl" -type f | head -1)
          if [ -z "$PIACTL_PATH" ]; then
            echo "piactl not found after installation. Exiting."
            exit 1
          fi
          echo "piactl found at: $PIACTL_PATH"
          if [ "$(realpath "$PIACTL_PATH")" != "$(realpath /usr/local/bin/piactl 2>/dev/null)" ]; then
            sudo cp "$PIACTL_PATH" /usr/local/bin/
            echo "piactl copied to /usr/local/bin."
          else
            echo "piactl is already in /usr/local/bin."
          fi
          echo "piactl installed at $(which piactl)"

          echo "Logging into PIA (verbose, timeout 90 sec)..."
          echo -e "${PIA_USERNAME}\n${PIA_PASSWORD}" > pia_credentials.txt
          sudo piactl login --timeout 90 --debug pia_credentials.txt 2>&1 | tee piactl_login.log
          rm pia_credentials.txt

          echo "Connecting to PIA (verbose, timeout 90 sec)..."
          sudo piactl connect --timeout 90 --debug 2>&1 | tee piactl_connect.log
          sleep 10

      - name: Install Puppeteer Dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth

      - name: Create Puppeteer Script for Rumble
        run: |
          mkdir -p scripts screenshots
          cat > scripts/rumble-visit.js << 'EOF'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          const { execSync } = require('child_process');

          puppeteer.use(StealthPlugin());

          function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
          }

          async function safeScreenshot(page, path) {
              try {
                  await page.screenshot({ path });
                  console.log(`Screenshot taken: ${path}`);
              } catch (err) {
                  console.error(`Failed to take screenshot ${path}: ${err.message}`);
              }
          }

          async function reconnectVPN() {
              console.log("Reconnecting to a different VPN server...");
              try {
                  execSync("sudo piactl disconnect", { stdio: 'inherit' });
                  await sleep(10000);
                  execSync("sudo piactl connect", { stdio: 'inherit' });
                  await sleep(10000);
                  const newIP = execSync("curl -s https://api64.ipify.org").toString().trim();
                  console.log("New VPN IP:", newIP);
                  return true;
              } catch (error) {
                  console.error("Failed to reconnect VPN:", error.message);
                  return reconnectVPN();
              }
          }

          async function visitRumble(videoUrl) {
              let browser = await puppeteer.launch({
                  headless: "new",
                  ignoreHTTPSErrors: true,
                  executablePath: require('puppeteer').executablePath(),
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
              });

              let page = await browser.newPage();
              await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/133.0.0.0 Safari/537.36');
              await page.setCacheEnabled(false);

              console.log("Navigating to Rumble video...");
              await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 120000 });
              await sleep(3000);
              await safeScreenshot(page, `./screenshots/rumble_landing_${Date.now()}.png`);

              const playButtonSelectors = [
                  '.bigPlayUIInner.ctp',
                  'button[aria-label="Play"]',
                  '.vjs-big-play-button',
                  '.icon-play',
                  'div[class*=play]'
              ];

              let playButton = null;
              for (const selector of playButtonSelectors) {
                  playButton = await page.$(selector);
                  if (playButton) {
                      console.log(`Play button found using selector: ${selector}`);
                      await playButton.click();
                      await sleep(3000);
                      await safeScreenshot(page, `./screenshots/rumble_play_clicked_${Date.now()}.png`);
                      break;
                  }
              }

              if (!playButton) {
                  console.warn("Play button not found. Proceeding without clicking.");
              }

              for (let t = 5; t <= 30; t += 5) {
                  await sleep(5000);
                  await safeScreenshot(page, `./screenshots/rumble_watch_${t}s_${Date.now()}.png`);
                  const isPlaying = await page.evaluate(() => {
                      const video = document.querySelector("video");
                      return video && !video.paused && !video.ended && video.readyState > 2;
                  });
                  if (!isPlaying) {
                      console.log("Video is not playing. Attempting VPN reconnect...");
                      await browser.close();
                      const reconnected = await reconnectVPN();
                      if (reconnected) {
                          return await visitRumble(videoUrl);
                      } else {
                          throw new Error("VPN reconnect failed. Aborting.");
                      }
                  }
              }
              const finalHtml = await page.content();
              const htmlFile = `./screenshots/final_rumble_page_${Date.now()}.html`;
              fs.writeFileSync(htmlFile, finalHtml);
              console.log(`Final HTML page saved: ${htmlFile}`);
              await browser.close();
          }

          async function run() {
              const videoUrl = process.argv[2] || "https://rumble.com/v6r0vz6-automate.html";
              await visitRumble(videoUrl);
          }

          run().catch(error => {
              console.error("Script failed:", error.message);
          });
          EOF

      - name: Run Puppeteer Script
        run: |
          VIDEO_URL="${{ github.event.inputs.video_url || 'https://rumble.com/v6r0vz6-automate.html' }}"
          echo "Visiting: $VIDEO_URL"
          node scripts/rumble-visit.js "$VIDEO_URL" | tee rumble_script_output.log

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rumble-debug-artifact-${{ runner.os }}
          path: |
            screenshots/
            piactl_login.log
            piactl_connect.log
            *.log
            *.html
          retention-days: 7
