name: Test PIA VPN Connection via OpenVPN
on:
  push:           # Runs automatically on each commit
  workflow_dispatch:  # Also allows manual triggering
jobs:
  test-pia-vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Test PIA VPN Connection and Routes
        run: |
          docker run --rm --privileged --cap-add=NET_ADMIN --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c "
            export DEBIAN_FRONTEND=noninteractive
            echo 'Installing dependencies...'
            apt update
            apt install -y --no-install-recommends curl wget openvpn ca-certificates iproute2 unzip traceroute iputils-ping
            
            # Capture pre-VPN state
            echo 'Initial Network State:'
            echo 'Original routes:'
            ip route
            echo 'Original traceroute to Google DNS:'
            traceroute -n -T -m 10 8.8.8.8 || echo 'Traceroute failed'
            
            echo 'Downloading PIA OpenVPN configuration files...'
            mkdir -p /tmp/pia
            cd /tmp/pia
            wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
            unzip -q openvpn.zip
            
            echo 'Creating credentials file...'
            echo '${{ secrets.PIA_USERNAME }}' > /tmp/pia/auth.txt
            echo '${{ secrets.PIA_PASSWORD }}' >> /tmp/pia/auth.txt
            chmod 600 /tmp/pia/auth.txt
            
            # Test a known working server from previous tests
            SERVER='us_east'
            SERVER_FILE=/tmp/pia/\${SERVER}.ovpn
            
            # Modify the auth-user-pass line to point to our auth file
            sed -i 's/auth-user-pass/auth-user-pass \/tmp\/pia\/auth.txt/' \$SERVER_FILE
            
            # Start OpenVPN
            echo \"Starting OpenVPN connection to \$SERVER...\"
            openvpn --config \$SERVER_FILE --daemon --log /tmp/openvpn.log
            
            # Wait for connection
            success=false
            for i in \$(seq 1 10); do
              echo \"Checking for VPN interface (attempt \$i)...\"
              if ip a | grep -q tun0; then
                success=true
                echo \"VPN interface detected!\"
                ip a show tun0
                
                # Extended verification without relying on external IP checks
                echo \"VPN routing table:\"
                ip route
                
                echo \"Verifying routes are going through VPN tunnel:\"
                if ip route | grep -q \"0.0.0.0/1 via 10.\"; then
                  echo \"SUCCESS: Default routes redirected through VPN tunnel\"
                else
                  echo \"WARNING: Default routes not fully redirected\"
                fi
                
                echo \"Post-VPN traceroute to Google DNS:\"
                traceroute -n -T -m 10 8.8.8.8 || echo 'Traceroute failed'
                
                # Test VPN DNS resolution
                echo \"Testing DNS through VPN:\"
                ping -c 3 google.com || echo 'Ping failed'
                
                break
              fi
              sleep 3
            done
            
            if [ \"\$success\" = true ]; then
              echo \"VPN Connection Test Complete - SUCCESS\"
              cat /tmp/openvpn.log | grep \"Initialization Sequence Completed\"
              exit 0
            else
              echo \"VPN Connection Failed\"
              cat /tmp/openvpn.log
              exit 1
            fi
          "
          exit_code=$?
          echo "Docker run exit code: $exit_code"
          exit $exit_code
