name: Rumble Visit with VPN in Container

on:
  push:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      video_url:
        description: "Rumble Video URL"
        required: true
        default: "https://rumble.com/v6r0vz6-automate.html"

jobs:
  rumble-vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Script Directory
        run: |
          mkdir -p screenshots
          mkdir -p logs

      - name: Run OpenVPN Connection with DNS Fix
        run: |
          docker run --rm --privileged --cap-add=NET_ADMIN --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c "
            set -e
            export DEBIAN_FRONTEND=noninteractive
            
            echo 'Installing basic dependencies...'
            apt-get update
            apt-get install -y wget unzip openvpn ca-certificates iproute2 curl iputils-ping traceroute dnsutils
            
            # Check initial network
            echo 'Initial Network State:'
            echo 'IP address:'
            curl -s https://api.ipify.org || echo 'Failed to get initial IP'
            echo 'DNS resolution:'
            dig +short google.com
            echo 'Initial DNS server:'
            cat /etc/resolv.conf
            
            echo 'Setting up OpenVPN connection to PIA...'
            mkdir -p /tmp/pia
            cd /tmp/pia
            wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
            unzip -q openvpn.zip
            
            echo 'Creating credentials file...'
            echo '${{ secrets.PIA_USERNAME }}' > /tmp/pia/auth.txt
            echo '${{ secrets.PIA_PASSWORD }}' >> /tmp/pia/auth.txt
            chmod 600 /tmp/pia/auth.txt
            
            echo 'Configuring OpenVPN with explicit DNS settings...'
            SERVER_FILE=/tmp/pia/us_east.ovpn
            # Backup original file
            cp \$SERVER_FILE \$SERVER_FILE.bak
            
            # Modify the config file
            sed -i 's/auth-user-pass/auth-user-pass \/tmp\/pia\/auth.txt/' \$SERVER_FILE
            sed -i 's/verb 1/verb 4/' \$SERVER_FILE
            
            # Add DNS options for Google DNS
            echo '# Explicitly set DNS servers' >> \$SERVER_FILE
            echo 'dhcp-option DNS 8.8.8.8' >> \$SERVER_FILE
            echo 'dhcp-option DNS 8.8.4.4' >> \$SERVER_FILE
            echo 'script-security 2' >> \$SERVER_FILE
            echo 'up /etc/openvpn/update-resolv-conf' >> \$SERVER_FILE
            echo 'down /etc/openvpn/update-resolv-conf' >> \$SERVER_FILE
            
            # Create DNS update script
            mkdir -p /etc/openvpn
            cat > /etc/openvpn/update-resolv-conf << 'EOF'
            #!/bin/bash
            # Script to update DNS settings when OpenVPN connects
            
            # Create a new resolv.conf with Google DNS
            cat > /etc/resolv.conf << RESOLV
            nameserver 8.8.8.8
            nameserver 8.8.4.4
            options edns0 trust-ad
            search .
            RESOLV
            
            echo \"DNS configuration updated\"
            EOF
            chmod +x /etc/openvpn/update-resolv-conf
            
            echo 'Starting OpenVPN connection...'
            openvpn --config \$SERVER_FILE --script-security 2 --daemon --log /tmp/openvpn.log
            
            echo 'Waiting for VPN interface to establish...'
            for i in \$(seq 1 12); do
              echo \"Checking for VPN interface (attempt \$i)...\"
              if ip a | grep -q tun0; then
                echo \"VPN interface detected!\"
                ip a show tun0
                echo \"VPN routing table:\"
                ip route
                
                # Wait for DNS to propagate
                sleep 5
                
                # Ensure DNS is properly configured
                echo \"Manually setting Google DNS...\"
                echo 'nameserver 8.8.8.8' > /etc/resolv.conf
                echo 'nameserver 8.8.4.4' >> /etc/resolv.conf
                
                echo \"Current DNS configuration:\"
                cat /etc/resolv.conf
                
                # Comprehensive network testing through VPN
                echo \"Testing DNS through VPN:\"
                dig +short google.com
                
                echo \"Testing ping through VPN:\"
                ping -c 3 8.8.8.8
                
                echo \"Testing traceroute through VPN:\"
                traceroute -n -m 10 8.8.8.8
                
                echo \"Testing IP services through VPN:\"
                echo \"ipify.org:\"
                curl -s https://api.ipify.org
                
                # Save logs
                mkdir -p /tmp/logs
                ip a > /tmp/logs/interfaces.log
                ip route > /tmp/logs/routes.log
                cat /etc/resolv.conf > /tmp/logs/resolv.conf
                cat /tmp/openvpn.log > /tmp/logs/openvpn.log
                
                # Make logs accessible
                chmod -R 777 /tmp/logs
                break
              fi
              
              if [ \$i -eq 12 ]; then
                echo \"VPN Connection Failed\"
                cat /tmp/openvpn.log > /tmp/logs/openvpn.log
                chmod -R 777 /tmp/logs
                exit 1
              fi
              
              # Show more logs for debugging
              if [ \$((i % 2)) -eq 0 ]; then
                echo \"Current OpenVPN log:\"
                cat /tmp/openvpn.log | tail -30
              fi
              
              sleep 5
            done
          "
          
          # Copy logs from Docker
          docker cp $(docker ps -lq):/tmp/logs ./logs
          chmod -R 755 ./logs

      - name: Upload Diagnostic Information
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vpn-diagnostics
          path: |
            logs/
          retention-days: 7
