name: Test PIA VPN Files and Connectivity
on:
  push:           # Runs automatically on each commit
  workflow_dispatch:  # Also allows manual triggering
jobs:
  test-pia-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Test Network Connectivity to PIA Servers
        run: |
          echo "Testing general internet connectivity..."
          curl -s https://api.github.com/meta | head -10
          
          echo "Testing connection to PIA website..."
          curl -v https://www.privateinternetaccess.com/ 2>&1 | grep "< HTTP"
          
          echo "Downloading PIA OpenVPN configuration files..."
          mkdir -p pia_configs
          cd pia_configs
          wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
          
          echo "Listing downloaded PIA OpenVPN configurations:"
          unzip -l openvpn.zip
          
          echo "Testing connectivity to common PIA server IPs..."
          echo "Testing TCP port 443 connectivity to PIA NY server:"
          timeout 5 nc -vz 193.37.253.181 443 || echo "Connection failed"
          
          echo "Testing UDP port 1198 connectivity to PIA NY server:"
          timeout 5 nc -vu 193.37.253.181 1198 || echo "UDP connection test may be inconclusive"
          
          echo "Testing UDP port 53 connectivity to PIA NY server:"
          timeout 5 nc -vu 193.37.253.181 53 || echo "UDP connection test may be inconclusive"
          
          echo "Testing direct connection to PIA API:"
          curl -v https://serverlist.piaservers.net/vpninfo/servers/v6 2>&1 | head -20
      
      - name: Test PIA VPN Minimal Connection
        run: |
          set +e
          docker run --rm --privileged --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c '
            set -e
            export DEBIAN_FRONTEND=noninteractive
            echo "Installing minimal dependencies..."
            apt update && apt install -y --no-install-recommends curl wget openvpn ca-certificates iproute2 dnsutils netcat-openbsd
            
            echo "Downloading PIA server list to find active servers..."
            curl -s https://serverlist.piaservers.net/vpninfo/servers/v6 > /tmp/pia_servers.json
            echo "Sample of server information:"
            head -20 /tmp/pia_servers.json
            
            echo "Testing connectivity to multiple PIA servers with various protocols and ports..."
            # Test TCP connectivity to several PIA servers on port 443
            echo "Testing TCP port 443 connections to multiple PIA servers:"
            for ip in 193.37.253.181 84.17.62.130 84.17.59.50 84.17.59.130 84.17.57.98; do
              echo "Testing $ip:443 (TCP)..."
              timeout 2 nc -vz $ip 443 || echo "Connection failed"
            done
            
            # Test UDP connectivity to several PIA servers
            echo "Testing UDP port 53 connections to multiple PIA servers:"
            for ip in 193.37.253.181 84.17.62.130 84.17.59.50 84.17.59.130 84.17.57.98; do
              echo "Testing $ip:53 (UDP)..."
              timeout 2 nc -vu $ip 53 || echo "Connection test inconclusive"
            done
            
            echo "Creating minimal OpenVPN test configs for multiple servers and ports..."
            mkdir -p /tmp/pia_tests
            
            # Create minimal configs for different servers and protocols
            for proto in tcp udp; do
              for port in 443 1198 53; do
                for ip in 193.37.253.181 84.17.62.130; do
                  test_dir="/tmp/pia_tests/${ip}_${proto}_${port}"
                  mkdir -p $test_dir
                  
                  echo "client" > $test_dir/config.ovpn
                  echo "dev tun" >> $test_dir/config.ovpn
                  echo "proto $proto" >> $test_dir/config.ovpn
                  echo "remote $ip $port" >> $test_dir/config.ovpn
                  echo "resolv-retry infinite" >> $test_dir/config.ovpn
                  echo "nobind" >> $test_dir/config.ovpn
                  echo "persist-key" >> $test_dir/config.ovpn
                  echo "persist-tun" >> $test_dir/config.ovpn
                  echo "data-ciphers AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305" >> $test_dir/config.ovpn
                  echo "auth SHA256" >> $test_dir/config.ovpn
                  echo "tls-client" >> $test_dir/config.ovpn
                  echo "remote-cert-tls server" >> $test_dir/config.ovpn
                  echo "auth-user-pass auth.txt" >> $test_dir/config.ovpn
                  echo "verb 4" >> $test_dir/config.ovpn
                  echo "connect-retry 2 5" >> $test_dir/config.ovpn
                  echo "connect-timeout 5" >> $test_dir/config.ovpn
                  echo "dhcp-option DNS 8.8.8.8" >> $test_dir/config.ovpn
                  
                  # Create auth file
                  echo "${{ secrets.PIA_USERNAME }}" > $test_dir/auth.txt
                  echo "${{ secrets.PIA_PASSWORD }}" >> $test_dir/auth.txt
                  chmod 600 $test_dir/auth.txt
                  
                  # Download CA cert
                  wget -q https://raw.githubusercontent.com/pia-foss/manual-connections/master/ca.rsa.4096.crt -O $test_dir/ca.rsa.4096.crt
                  echo "ca ca.rsa.4096.crt" >> $test_dir/config.ovpn
                  
                  echo "Created test config for $ip using $proto on port $port"
                done
              done
            done
            
            echo "Testing short connection attempts to different configurations..."
            for test_dir in /tmp/pia_tests/*; do
              config=$(basename $test_dir)
              echo "Testing connection with $config"
              cd $test_dir
              timeout 7 openvpn --config config.ovpn --log openvpn.log &
              pid=$!
              sleep 5
              kill -15 $pid 2>/dev/null || true
              echo "OpenVPN log excerpt for $config:"
              tail -10 openvpn.log
              echo "----------------------------------------"
            done
          '
          echo "Docker exit code: $?"
