name: Rumble Visit with VPN in Container

on:
  push:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      video_url:
        description: "Rumble Video URL"
        required: true
        default: "https://rumble.com/v6r0vz6-automate.html"

jobs:
  rumble-vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Script Directory
        run: |
          mkdir -p screenshots
          mkdir -p logs

      - name: Run OpenVPN Connection with Direct DNS
        run: |
          docker run --rm --privileged --cap-add=NET_ADMIN --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c "
            set -e
            export DEBIAN_FRONTEND=noninteractive
            
            echo 'Installing basic dependencies...'
            apt-get update
            apt-get install -y wget unzip openvpn ca-certificates iproute2 curl iputils-ping traceroute dnsutils
            
            # Check initial network
            echo 'Initial Network State:'
            echo 'IP address:' \$(curl -s https://api.ipify.org)
            echo 'DNS resolution:' \$(dig +short google.com)
            echo 'Initial DNS server:'
            cat /etc/resolv.conf
            
            echo 'Setting up OpenVPN connection to PIA...'
            mkdir -p /tmp/pia
            cd /tmp/pia
            wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
            unzip -q openvpn.zip
            
            echo 'Creating credentials file...'
            echo '${{ secrets.PIA_USERNAME }}' > /tmp/pia/auth.txt
            echo '${{ secrets.PIA_PASSWORD }}' >> /tmp/pia/auth.txt
            chmod 600 /tmp/pia/auth.txt
            
            # Create directory for logs
            mkdir -p /tmp/logs
            
            echo 'Configuring OpenVPN with explicit DNS settings...'
            SERVER_FILE=/tmp/pia/us_east.ovpn
            
            # Modify the config file
            sed -i 's/auth-user-pass/auth-user-pass \/tmp\/pia\/auth.txt/' \$SERVER_FILE
            sed -i 's/verb 1/verb 4/' \$SERVER_FILE
            
            # Add DNS options
            echo 'dhcp-option DNS 8.8.8.8' >> \$SERVER_FILE
            echo 'dhcp-option DNS 8.8.4.4' >> \$SERVER_FILE
            
            echo 'Starting OpenVPN connection...'
            openvpn --config \$SERVER_FILE --daemon --log /tmp/openvpn.log
            
            echo 'Waiting for VPN interface to establish...'
            for i in \$(seq 1 12); do
              echo \"Checking for VPN interface (attempt \$i)...\"
              if ip a | grep -q tun0; then
                echo \"VPN interface detected!\"
                ip a show tun0
                echo \"VPN routing table:\"
                ip route
                
                # Manually override DNS to ensure it works
                echo \"Setting Google DNS directly...\"
                echo 'nameserver 8.8.8.8' > /etc/resolv.conf
                echo 'nameserver 8.8.4.4' >> /etc/resolv.conf
                
                echo \"Current DNS configuration:\"
                cat /etc/resolv.conf
                
                # Test DNS
                echo \"Testing DNS resolution:\"
                dig +short google.com
                
                # Test IP services
                echo \"Testing IP services:\"
                curl -s https://api.ipify.org
                
                # Store logs
                cp /tmp/openvpn.log /tmp/logs/
                ip a > /tmp/logs/interfaces.log
                ip route > /tmp/logs/routes.log
                cat /etc/resolv.conf > /tmp/logs/resolv.conf
                
                # Make logs accessible
                chmod -R 777 /tmp/logs
                break
              fi
              
              if [ \$i -eq 12 ]; then
                echo \"VPN Connection Failed\"
                cat /tmp/openvpn.log > /tmp/logs/openvpn.log
                chmod -R 777 /tmp/logs
                exit 1
              fi
              
              # Display logs
              if [ \$((i % 3)) -eq 0 ]; then
                echo \"Current OpenVPN log:\"
                tail -n 20 /tmp/openvpn.log
              fi
              
              sleep 5
            done
          "
          
          # Copy logs from Docker
          docker cp $(docker ps -lq):/tmp/logs ./logs || echo "Failed to copy logs"

      - name: Upload Diagnostic Information
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vpn-diagnostics
          path: |
            logs/
          retention-days: 7
