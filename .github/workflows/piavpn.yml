name: Rumble Visit with VPN in Container

on:
  push:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      video_url:
        description: "Rumble Video URL"
        required: true
        default: "https://rumble.com/v6r0vz6-automate.html"

jobs:
  rumble-vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup VPN and Run Puppeteer
        run: |
          # Disable immediate exit on error in the host shell
          set +e
          
          docker run --rm --privileged --cap-add=NET_ADMIN --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c "
            set -e  # Exit immediately if a command fails
            export DEBIAN_FRONTEND=noninteractive
            
            echo 'Installing dependencies...'
            apt-get update
            # Install required packages one by one to ensure they're all installed
            apt-get install -y wget
            apt-get install -y unzip
            apt-get install -y openvpn
            apt-get install -y ca-certificates
            apt-get install -y iproute2
            apt-get install -y curl
            
            # Check that critical commands are available
            which wget || { echo 'wget not installed'; exit 1; }
            which unzip || { echo 'unzip not installed'; exit 1; }
            which openvpn || { echo 'openvpn not installed'; exit 1; }
            which ip || { echo 'ip command not installed'; exit 1; }
            which curl || { echo 'curl not installed'; exit 1; }
            
            # Set up OpenVPN with PIA
            echo 'Setting up OpenVPN connection to PIA...'
            mkdir -p /tmp/pia
            cd /tmp/pia
            echo 'Downloading PIA OpenVPN configurations...'
            wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
            echo 'Extracting configuration files...'
            unzip -q openvpn.zip
            ls -la  # List files to ensure they downloaded correctly
            
            # Create credentials file
            echo 'Creating credentials file...'
            echo '${{ secrets.PIA_USERNAME }}' > /tmp/pia/auth.txt
            echo '${{ secrets.PIA_PASSWORD }}' >> /tmp/pia/auth.txt
            chmod 600 /tmp/pia/auth.txt
            
            # Use US East server as it was proven reliable
            SERVER_FILE=/tmp/pia/us_east.ovpn
            if [ ! -f \"\$SERVER_FILE\" ]; then
              echo \"Server file \$SERVER_FILE not found. Listing available files:\"
              ls -la /tmp/pia/
              exit 1
            fi
            
            # Modify the auth-user-pass line to point to our auth file
            sed -i 's/auth-user-pass/auth-user-pass \/tmp\/pia\/auth.txt/' \$SERVER_FILE
            
            # Start OpenVPN
            echo 'Starting OpenVPN connection...'
            openvpn --config \$SERVER_FILE --daemon --log /tmp/openvpn.log
            
            # Wait for connection
            echo 'Waiting for VPN interface to establish...'
            success=false
            for i in \$(seq 1 15); do
              echo \"Checking for VPN interface (attempt \$i)...\"
              if ip a | grep -q tun0; then
                success=true
                echo \"VPN interface detected!\"
                ip a show tun0
                echo \"VPN routing table:\"
                ip route
                break
              fi
              
              # Check OpenVPN logs periodically
              if [ \$((i % 3)) -eq 0 ]; then
                echo \"Current OpenVPN log:\"
                tail -n 20 /tmp/openvpn.log
              fi
              
              sleep 5
            done
            
            if [ \"\$success\" != \"true\" ]; then
              echo \"VPN Connection Failed\"
              cat /tmp/openvpn.log
              exit 1
            fi
            
            # Verify we have a different IP now
            echo \"Checking VPN IP:\"
            curl -s https://api.ipify.org || echo \"IP check timed out (expected through VPN)\"
            
            echo 'VPN connection established successfully.'
            
            # Create directories for output
            mkdir -p /screenshots
            echo 'Script completed successfully'
          "
          
          # Copy artifacts back to the host if any were created
          mkdir -p screenshots
          docker cp $(docker ps -lq):/screenshots ./screenshots || echo "No screenshots to copy"
          docker cp $(docker ps -lq):/openvpn.log ./openvpn.log || echo "No VPN log to copy"

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts-${{ github.run_id }}
          path: |
            screenshots/
            *.log
          retention-days: 7
