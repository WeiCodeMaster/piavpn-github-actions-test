name: Test PIA VPN Connection (TCP 443 Insecure)
on:
  push:           # Runs automatically on each commit
  workflow_dispatch:  # Also allows manual triggering
jobs:
  test-pia-vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Run PIA VPN with Compatible Options
        run: |
          # Disable immediate exit on error in the host shell so we can capture the exit code.
          set +e
          docker run --rm --privileged --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c '
            # Enable better error handling
            set -ex
            
            export DEBIAN_FRONTEND=noninteractive
            echo "Installing dependencies..."
            apt update
            apt install -y --no-install-recommends curl wget openvpn ca-certificates iproute2
            
            # Record initial state
            echo "Initial IP:"
            curl -s https://api.ipify.org || echo "Unable to get initial IP"
            
            echo "Setting up OpenVPN configuration..."
            mkdir -p /tmp/pia
            
            # Create config with compatible options
            echo "client" > /tmp/pia/pia.ovpn
            echo "dev tun" >> /tmp/pia/pia.ovpn
            echo "proto tcp" >> /tmp/pia/pia.ovpn
            echo "remote 84.17.57.98 443" >> /tmp/pia/pia.ovpn
            echo "resolv-retry infinite" >> /tmp/pia/pia.ovpn
            echo "nobind" >> /tmp/pia/pia.ovpn
            echo "persist-key" >> /tmp/pia/pia.ovpn
            echo "persist-tun" >> /tmp/pia/pia.ovpn
            echo "cipher AES-256-CBC" >> /tmp/pia/pia.ovpn  # Compatible cipher
            echo "auth SHA1" >> /tmp/pia/pia.ovpn           # Compatible auth
            echo "auth-nocache" >> /tmp/pia/pia.ovpn
            echo "auth-user-pass /tmp/pia/auth.txt" >> /tmp/pia/pia.ovpn
            echo "comp-lzo" >> /tmp/pia/pia.ovpn
            echo "verb 3" >> /tmp/pia/pia.ovpn
            echo "connect-retry 5 5" >> /tmp/pia/pia.ovpn
            echo "connect-timeout 10" >> /tmp/pia/pia.ovpn
            echo "dhcp-option DNS 8.8.8.8" >> /tmp/pia/pia.ovpn
            echo "dhcp-option DNS 8.8.4.4" >> /tmp/pia/pia.ovpn
            echo "pull" >> /tmp/pia/pia.ovpn
            echo "fast-io" >> /tmp/pia/pia.ovpn
            # Skip certificate verification
            echo "tls-client" >> /tmp/pia/pia.ovpn
            echo "remote-cert-tls server" >> /tmp/pia/pia.ovpn
            echo "ns-cert-type server" >> /tmp/pia/pia.ovpn  # Legacy option for compatibility 
            
            # Show contents of the config file
            echo "OpenVPN config:"
            cat /tmp/pia/pia.ovpn
            
            echo "Creating credentials file..."
            echo "${{ secrets.PIA_USERNAME }}" > /tmp/pia/auth.txt
            echo "${{ secrets.PIA_PASSWORD }}" >> /tmp/pia/auth.txt
            chmod 600 /tmp/pia/auth.txt
            
            echo "Starting OpenVPN connection..."
            # Start OpenVPN with command line options to handle insecure connections
            openvpn --config /tmp/pia/pia.ovpn --auth-nocache --auth-retry nointeract --daemon --log /tmp/openvpn.log
            
            echo "Waiting for VPN interface to establish..."
            for i in $(seq 1 15); do
              echo "Checking for VPN interface (attempt $i)..."
              if ip a | grep -q tun0; then
                echo "VPN interface detected!"
                ip a show tun0
                # Check if we have a new IP
                echo "New IP after VPN connection:"
                curl -s https://api.ipify.org || echo "Unable to get new IP"
                echo "VPN connection successful!"
                exit 0
              fi
              
              # Show logs every attempt for better debugging
              echo "Current OpenVPN log (attempt $i):"
              if [ -f /tmp/openvpn.log ]; then
                tail -n 20 /tmp/openvpn.log
              else
                echo "Log file does not exist yet"
              fi
              
              sleep 3
            done
            
            echo "VPN connection timed out."
            if [ -f /tmp/openvpn.log ]; then
              echo "Full OpenVPN logs:"
              cat /tmp/openvpn.log
            else
              echo "No OpenVPN log file found."
            fi
            exit 1
          '
          exit_code=$?
          echo "Docker run exit code: $exit_code"
          exit $exit_code
