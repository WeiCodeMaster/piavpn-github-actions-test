name: Test PIA VPN Connection via OpenVPN
on:
  push:           # Runs automatically on each commit
  workflow_dispatch:  # Also allows manual triggering
jobs:
  test-pia-vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Run PIA VPN using Official OpenVPN Config
        run: |
          # Disable immediate exit on error in the host shell so we can capture the exit code.
          set +e
          docker run --rm --privileged --cap-add=NET_ADMIN --security-opt seccomp=unconfined --security-opt apparmor=unconfined ubuntu:latest bash -c '
            export DEBIAN_FRONTEND=noninteractive
            echo "Installing dependencies..."
            apt update
            apt install -y --no-install-recommends curl wget openvpn ca-certificates iproute2 unzip
            
            # Record initial state
            echo "Initial IP:"
            curl -s https://api.ipify.org || echo "Unable to get initial IP"
            
            echo "Downloading PIA OpenVPN configuration files..."
            mkdir -p /tmp/pia
            cd /tmp/pia
            wget -q https://www.privateinternetaccess.com/openvpn/openvpn.zip
            
            echo "Extracting configuration files..."
            unzip -q openvpn.zip
            ls -la  # List the available configuration files
            
            echo "Creating credentials file..."
            cat > /tmp/pia/auth.txt << EOF
            ${{ secrets.PIA_USERNAME }}
            ${{ secrets.PIA_PASSWORD }}
            EOF
            chmod 600 /tmp/pia/auth.txt
            
            echo "Starting OpenVPN connection using official PIA configuration..."
            # Choose a US server as example
            OVPN_CONFIG="/tmp/pia/us_california.ovpn"
            
            # Modify the auth-user-pass line to point to our auth file
            sed -i "s/auth-user-pass/auth-user-pass \/tmp\/pia\/auth.txt/" $OVPN_CONFIG
            
            # Start OpenVPN
            openvpn --config $OVPN_CONFIG --daemon --log /tmp/openvpn.log
            
            echo "Waiting for VPN interface to establish..."
            # Sleep first to give OpenVPN time to start
            sleep 10
            
            # Check if OpenVPN is still running
            if ! pgrep -x openvpn > /dev/null; then
              echo "OpenVPN process died. Checking logs:"
              cat /tmp/openvpn.log
              exit 1
            fi
            
            # Now check for interface
            for i in $(seq 1 15); do
              echo "Checking for VPN interface (attempt $i)..."
              if ip a | grep -q tun0; then
                echo "VPN interface detected!"
                ip a show tun0
                # Check if we have a new IP
                echo "New IP after VPN connection:"
                curl -s https://api.ipify.org || echo "Unable to get new IP"
                echo "VPN connection successful!"
                exit 0
              fi
              
              # Show logs every attempt
              echo "Current OpenVPN log (attempt $i):"
              if [ -f /tmp/openvpn.log ]; then
                tail -n 20 /tmp/openvpn.log
              else
                echo "Log file does not exist yet"
              fi
              
              # Check if OpenVPN is still running
              if ! pgrep -x openvpn > /dev/null; then
                echo "OpenVPN process died. Checking logs:"
                cat /tmp/openvpn.log
                exit 1
              fi
              
              sleep 5
            done
            
            echo "VPN connection timed out."
            if [ -f /tmp/openvpn.log ]; then
              echo "Full OpenVPN logs:"
              cat /tmp/openvpn.log
            else
              echo "No OpenVPN log file found."
            fi
            
            # See if OpenVPN is still running
            if pgrep -x openvpn > /dev/null; then
              echo "OpenVPN process is still running but no interface was created."
              pkill openvpn
            fi
            
            exit 1
          '
          exit_code=$?
          echo "Docker run exit code: $exit_code"
          exit $exit_code
